=== Git'in Temelleri

<<<<<<<
Peki Git özünde nedir? 
Bu, özümsenmesi gereken önemli bir alt bölüm; çünkü Git'in ne olduğunu ve temel çalışma ilkelerini anlarsanız, Git'i etkili biçimde kullanmanız çok daha kolay olacaktır. 
Git'i öğrenirken, Subversion ve Perforce gibi diğer SKS'ler hakkında bildiklerinizi aklınızdan çıkarmaya çalışın; bu aracı kullanırken yaşanabilecek kafa karışıklıklarını önlemenize yardımcı olacaktır. 
Git'in, kullanıcı arayüzü söz konusu sistemlerle benzerlik gösterse de, bilgiyi depolama ve yorumlama biçimi çok farklıdır; bu farklılıkları anlamak, aracı kullanırken kafa karışıklığı yaşamamanızı sağlamaya yardımcı olacaktır.
=======
So, what is Git in a nutshell?
This is an important section to absorb, because if you understand what Git is and the fundamentals of how it works, then using Git effectively will probably be much easier for you.
As you learn Git, try to clear your mind of the things you may know about other VCSs, such as CVS, Subversion or Perforce -- doing so will help you avoid subtle confusion when using the tool.
Even though Git's user interface is fairly similar to these other VCSs, Git stores and thinks about information in a very different way, and understanding these differences will help you avoid becoming confused while using it.(((Subversion)))(((Perforce)))
>>>>>>>

==== Farklar Değil, Bellek Kopyaları

<<<<<<<
Git ile diğer SKS'ler (Subversion ve ahbapları dahil) arasındaki esas fark, Git'in bilgiyi yorumlayış biçimiyle ilgilidir. 
Kavramsal olarak, diğer sistemlerin çoğu, bilgiyi dosya-tabanlı bir dizi değişiklik olarak depolar. 
Bu sistemler (CVS, Subversion, Perforce, Bazaar ve saire) bilgiyi, kayıt altında tuttukları bir dosya kümesi ve zamanla her bir dosya üzerinde yapılan değişikliklerin listesi olarak yorumlarlar.
=======
The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data.
Conceptually, most other systems store information as a list of file-based changes.
These other systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they store as a set of files and the changes made to each file over time (this is commonly described as _delta-based_ version control).
>>>>>>>

.Storing data as changes to a base version of each file.
image::images/deltas.png[Storing data as changes to a base version of each file.]

<<<<<<<
Git, veriyi böyle yorumlayıp depolamaz. 
Bunun yerine, Git, veriyi, bir mini dosya sisteminin bellek kopyaları olarak yorumlar. 
Her commit yapışınızda ya da projenizin konumunu her kaydedişinizde, Git o anda dosyalarınızın nasıl göründüğünün bir fotoğrafını çekip o bellek kopyasına bir referansı depolar. 
Verimli olabilmek için, değişmeyen dosyaları yeniden depolamaz, yalnızca halihazırda depolanmış olan bir önceki özdeş kopyaya bir bağlantı kurar. 
Git'in veriyi yorumlayışı daha çok *fotoğraf akışı* gibidir.
=======
Git doesn't think of or store its data this way.
Instead, Git thinks of its data more like a series of snapshots of a miniature filesystem.
With Git, every time you commit, or save the state of your project, Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot.
To be efficient, if files have not changed, Git doesn't store the file again, just a link to the previous identical file it has already stored.
Git thinks about its data more like a *stream of snapshots*.
>>>>>>>

.Storing data as snapshots of the project over time.
image::images/snapshots.png[Git stores data as snapshots of the project over time.]

<<<<<<<
Bu, Git'le neredeyse bütün diğer SKS'ler arasında ciddi bir ayrımdır. 
Bu ayrım nedeniyle Git, sürüm kontrolünün, diğer sürüm kontrol sistemlerinin çoğu tarafından önceki kuşaklardan devralınan neredeyse bütün yönlerini yeniden gözden geçirmek zorunda bırakır. 
Bu ayrım Git'i basit bir SKS olmanın ötesinde, etkili araçlara sahip bir mini dosya sistemi gibi olmaya iter. 
Veriyi bu şekilde yorumlamanın yararlarından bazılarını dallanmayı (branching) işleyeceğimiz <<_git_branching>>'de ele alacağız.
=======
This is an important distinction between Git and nearly all other VCSs.
It makes Git reconsider almost every aspect of version control that most other systems copied from the previous generation.
This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS.
We'll explore some of the benefits you gain by thinking of your data this way when we cover Git branching in <<ch03-git-branching#ch03-git-branching>>.
>>>>>>>

==== Neredeyse Tüm İşlemler Yerelde Yapılır

<<<<<<<
Git'teki işlemlerin çoğu, yalnızca yerel dosyalara ve kaynaklara ihtiyaç duyar —genellikle bilgisayar ağındaki başka bir bilgisayardaki bilgilere ihtiyaç yoktur. 
Eğer çoğu işlemin ağ gecikmesi maliyetiyle gerçekleştiği bir MSKS kullanmışsanız, Git'in bu yönünü görünce, onun hız tanrıları tarafından kutsanmış olduğunu düşünebilirsiniz. 
Projenin bütün tarihçesi orada, yerel diskinde bulunduğu için işlemlerin çoğu anlık gerçekleşiyor gibi görünür.

Örneğin, projenin tarihçesini taramak için Git bir sunucuya bağlanıp oradan tarihçeyi indirdikten sonra görüntülemekle uğraşmaz —bunu basit bir şekilde yerel veritabanınızdan okur. 
Bu da proje terihçesini neredeyse anında görünteleyebilmeniz anlamına gelir. 
Bir dosyanın şimdiki haliyle bir ay önceki hali arasındaki farkları görmek isterseniz, Git, bir sunucudan fark hesaplaması yapmasını talep etmek ya da karşılaştırmayı yerelde yapabilmek için dosyanın bir ay önceki halini indirmek zorunda kalmak yerine, dosyanın bir ay önceki halini yerelde bulup fark hesaplamasını yerelde yapar.

Bu aynı zamanda, eğer bağlantınız kopmuşsa ya da VPN bağlantını yoksa yapamayacağınız şeylerin de sayıca oldukça sınırlı olduğu anlamına geliyor. 
Uçağa ya da trene binmiş olduğunuz halde biraz çalışmak istiyorsanız, yükleme yapabileceğiniz bir ağ bağlantısına kavuşana kadar güle oynaya commit yapabilirsiniz. 
Eve vardığınızda VPN istemcinizin olması gerektiği gibi çalışmıyorsa, yine de çalışmaya devam edebilirsiniz. 
Pek çok başka sistemde bunları yapmak ya imkansız ya da zahmetlidir. 
Söz gelimi Perforce'ta, bir sunucuya bağlı değilseniz fazlaca bir şey yapamazsınız; Subversion ve CVS'te dosyaları değiştirebilirsiniz; ama veritabanına commit yapamazsınız (çünkü veritabanına bağlantınız yoktur). 
Bu, çok önemli bir sorun gibi görünmeyebilir; fakat ne kadar fark yaratabileceğini gördüğünüzde şaşırabilirsiniz.
=======
Most operations in Git need only local files and resources to operate -- generally no information is needed from another computer on your network.
If you're used to a CVCS where most operations have that network latency overhead, this aspect of Git will make you think that the gods of speed have blessed Git with unworldly powers.
Because you have the entire history of the project right there on your local disk, most operations seem almost instantaneous.

For example, to browse the history of the project, Git doesn't need to go out to the server to get the history and display it for you -- it simply reads it directly from your local database.
This means you see the project history almost instantly.
If you want to see the changes introduced between the current version of a file and the file a month ago, Git can look up the file a month ago and do a local difference calculation, instead of having to either ask a remote server to do it or pull an older version of the file from the remote server to do it locally.

This also means that there is very little you can't do if you're offline or off VPN.
If you get on an airplane or a train and want to do a little work, you can commit happily (to your _local_ copy, remember?) until you get to a network connection to upload.
If you go home and can't get your VPN client working properly, you can still work.
In many other systems, doing so is either impossible or painful.
In Perforce, for example, you can't do much when you aren't connected to the server; and in Subversion and CVS, you can edit files, but you can't commit changes to your database (because your database is offline).
This may not seem like a huge deal, but you may be surprised what a big difference it can make.
>>>>>>>

==== Git Bütünlüğe Sahiptir

Git'te her şey depolanmadan önce sınama toplamından geçirilir (checksum) ve daha sonra bu sınama toplamı kullanılarak ifade edilir. 
Bu da demek oluyor ki, Git fark etmeden bir dosyanın ya da klasörün içeriğini değiştirmek mümkün değildir. 
Bu işlev Git'in merkezi işlevlerinden biridir ve felsefesiyle bir bütünlük oluşturur. 
Transfer sırasında veri kaybı ya da doysa arızası olmuşsa, Git bunu mutlaka fark edecektir.

Git'in sınama toplamı için kullandığı mekanizmaya SHA-1 özeti denir.(((SHA-1))) 
Bu, on altılı sayı sisteminin (hexadecimal) sembolleriyle gösterilen (0-9 ve a-f) ve dosya ve klasör düzenini temel alan bir hesaplamayla elde denilen 40 karakterlik bir karakter dizisidir. 
Bir SHA-1 özeti şuna benzer:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Bu özetler sıklıkla karşınıza çıkacak; çünkü Git onları yaygın biçimde kullanyor. 
Hatta, Git her şeyi dosya adıyla değil, içeriğinin özet değeriyle adreslenen veritabanında tutar.

==== Git Genellikle Yalnızca Veri Ekler

<<<<<<<
Git'te işlem yaptığınızda neredeyse bu işlemlerin tamamı Git veritabanına veri ekler. 
Sistemin geri döndürülemez bir şey yapmasını ya da veri silmesini sağlamak çok zordur. 
Her SKS'de olduğu gibi henüz kaydetmediğiniz değişiklikleri kaybedebilir ya da bozabilirsiniz; ama Git'e bir commit yaptıktan sonra veri kaybetmek çok zordur, özellikle de veritabanınızı düzenli olarak başka bir repository'ye push ediyorsanız.

Bu Git kullanmayı keyifli hale getirir; çünkü işleri ciddi biçimde sıkıntıya sokmadan denemeler yapabileceğimizi biliriz. 
Git'in veriyi nasıl depoladığı ve kaybolmuş görünen veriyi nasıl kurtarabileceğiniz hakkında daha derinlikli bir inceleme için bkz. <<_undoing>>.
=======
When you do actions in Git, nearly all of them only _add_ data to the Git database.
It is hard to get the system to do anything that is not undoable or to make it erase data in any way.
As with any VCS, you can lose or mess up changes you haven't committed yet, but after you commit a snapshot into Git, it is very difficult to lose, especially if you regularly push your database to another repository.

This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.
For a more in-depth look at how Git stores its data and how you can recover data that seems lost, see <<ch02-git-basics-chapter#_undoing>>.
>>>>>>>

==== Üç Aşama

<<<<<<<
Şimdi dikkatinizi verin! 
Öğrenme sürecinizin pürüzsüz ilerlemesini istiyorsanız, aklınızda bulundurmanız gereken esas şey bu. 
Git'te, dosyalarınızın içinde bulunabileceği üç aşama (state) vardır: kaydedilmiş (committed), değiştirilmiş (modified) ve hazırlanmış (staged). 
Committed, verinin güvenli biçimde veritabanında depolanmış olduğu anlamına gelir. 
Modified, dosyayı değiştirmiş olduğunuz fakat henüz veritabanına kaydetmediğiniz anlamına gelir. 
Staged ise, değiştirilmiş bir dosyayı bir sonraki commit işleminde bellek kopyasına alınmak üzere işaretlediğiniz anlamına gelir.

Bu da bizi bir Git projesinin üç ana bölümüne getiriyor: Git klasörü, çalışma klasörü ve hazırlık alanı.
=======
Pay attention now -- here is the main thing to remember about Git if you want the rest of your learning process to go smoothly.
Git has three main states that your files can reside in: _committed_, _modified_, and _staged_:

* Committed means that the data is safely stored in your local database.
* Modified means that you have changed the file but have not committed it to your database yet.
* Staged means that you have marked a modified file in its current version to go into your next commit snapshot.
>>>>>>>

This leads us to the three main sections of a Git project: the Git directory, the working tree, and the staging area.

.Working tree, staging area, and Git directory.
image::images/areas.png["Working tree, staging area, and Git directory."]

<<<<<<<
Git klasörü, Git'in üstverileri (metadata) ve nesne veritabanını depoladığı yerdir. 
Bu, Git'in en önemli parçasıdır ve bir yazılım havuzunu bir bilgisayardan bir başkasına klonladığınızda kopyalanan şeydir.

Çalışma klasörü projenin bir sürümünden yapılan tek bir seçmedir (checkout). 
Bu dosyalar Git klasöründeki sıkıştırılmış veritabanından çıkartılıp sizin kullanımınız için sabit diske yerleştirilir.

Hazırlık alanı (staging area), genellikle Git klasörünüzde bulunan ve bir sonraki commit işlemine hangi değişikliklerin dahil olacağını tutan sade bir dosyadır. 
Buna bazen indeks dendiği de olur, ama staging area ifadesi giderek daha standart hale geliyor.
=======
The Git directory is where Git stores the metadata and object database for your project.
This is the most important part of Git, and it is what is copied when you _clone_ a repository from another computer.

The working tree is a single checkout of one version of the project.
These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.

The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit.
Its technical name in Git parlance is the ``index'', but the phrase ``staging area'' works just as well.
>>>>>>>

Git işleyişi temelde şöyledir:

<<<<<<<
1. Çalışma klasörünüzdeki dosyalar üzerinde değişiklik yaparsınız.
2. Dosyaları bellek kopyalarını hazırlık alanına ekleyerek hazırlarsınız.
3. Dosyaların hazırlık alanındaki hallerini alıp oradaki bellek kopyasını kalıcı olarak Git klasörüne depolayan bir commit işlemi yaparsınız.

Bir dosyanın belirli bir sürümü Git klasöründeyse, onun commit'lenmiş olduğu kabul edilir. 
Eğer üzerinde değişiklik yapılmış fakat hazırlık alanına eklenmişse, staged olduğu söylenir. 
Ve checkout işleminden sonra üzerinde değişiklik yapılmış; fakat commit için hazırlanmamışsa, değiştirilmiş olarak nitelenir.
<<_git_basics_chapter>> bölümünde, bu aşamalar hakkında ve onlardan nasıl faydalanacağınız ya da staged aşamasını nasıl geçebileceğinizi detaylıca öğreneceksiniz.
=======
1. You modify files in your working tree.
2. You selectively stage just those changes you want to be part of your next commit, which adds _only_ those changes to the staging area.
3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

If a particular version of a file is in the Git directory, it's considered committed.
If it has been modified and was added to the staging area, it is staged.
And if it was changed since it was checked out but has not been staged, it is modified.
In <<ch02-git-basics-chapter#ch02-git-basics-chapter>>, you'll learn more about these states and how you can either take advantage of them or skip the staged part entirely.
>>>>>>>
