=== Sürüm Kontrolü Hakkında

(((version control)))
<<<<<<<
Sürüm kontrolü nedir ve ne işe yarar? 
Sürüm kontrolü, bir ya da daha fazla dosya üzerinde yapılan değişiklikleri kaydeden ve daha sonra belirli bir sürüme geri dönebilmenizi sağlayan bir sistemdir.
Bu kitaptaki örneklerde yazılım kaynak kodlarının sürüm kontrolünü yapacaksınız; fakat gerçekte, sürüm kontrolünü neredeyse bilgisyardaki her tür dosya için kullanabilirsiniz.

Bir grafik ya da web tasarımcısıysanız ve bir görselin ya da tasarımın değişik sürümlerini korumak istiyorsanız (ki muhtemelen bunu yapmak istersiniz), bir Sürüm Kontrol Sistemi (SKS) kullanmanız çok akıllıca olacaktır. 
SKS, dosyaların ya da bütün projenin geçmişteki belirli bir sürümüne erişmenizi, zaman içinde yapılan değişiklikleri karşılaştırmanızı, soruna neden olan şeyde en son kimin değişiklik yaptığını, belirli bir hatayı kimin, ne zaman sisteme dahil ettiğini ve daha başka pek çok şeyi görebilmenizi sağlar. 
Öte yandan, SKS kullanmak, bir hata yaptığınızda ya da bazı dosyaları yanlışlıkla sildiğinizde durumu kolayca telâfi etmenize yardımcı olur. 
Üstelik, bütün bunlar size kayda değer bir ek yük de getirmez.
=======
What is ``version control'', and why should you care?
Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.
For the examples in this book, you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.

If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use.
It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.
Using a VCS also generally means that if you screw things up or lose files, you can easily recover.
In addition, you get all this for very little overhead.
>>>>>>>

==== Yerel Sürüm Kontrol Sistemleri

(((version control,local)))

Çoğu insanın sürüm kontrolü tercihi, dosyaları bir klasöre (akılları başlarındaysa tarih ve zaman bilgisini de içeren bir klasöre) kopyalayamak şeklindedir. 
Bu yaklaşım oldukça kolay olduğundan çok çok yaygındır; ama aynı zamanda hatalara da alabildiğine açıktır. 
Hangi klasörde olduğunuzu unutup yanlış dosyaya yazabilir ya da istemediğiniz dosyaların üstüne kopyalama yapabilirsiniz. 

Bu sorunla baş edebilmek için, programcılar uzun zaman önce, dosyalardaki bütün değişiklikleri sürüm kontrolüne alan basit bir veritabanına sahip olan yerel SKS'ler geliştirdiler

.Local version control.
image::images/local.png[Yerel sürüm kontrol diyagramı]

<<<<<<<
En yaygın SKS araçlarından biri, bugün hâlâ pekçok bilgisayara kurulu olarak dağıtılan, RCS adında bir sistemdi. 
Ünlü Mac OS X işletim sistemi bile, Geliştirici Araçları'nı (Developer Tools) yüklediğinizde, `rcs` komutunu kurmaktadır. 
RCS, çalışma şelki olarak, iki sürüm arasındaki yamaları (yani, dosyalar arasındaki farkları) özel bir biçimde diske kaydeder; daha sonra, bu yamaları birbirine ekleyerek, bir dosyanın belirli bir sürümdeki görünümünü yeniden oluşturur.
=======
One of the more popular VCS tools was a system called RCS, which is still distributed with many computers today.
RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.
>>>>>>>

==== Merkezi Sürüm Kontrol Sistemleri

(((version control,centralized)))
İnsanların karşılaştığı diğer büyük sorun, başka sistemlerdeki programcılarla birlikte çalışma ihtiyacıdır. 
Bu sorunla başa çıkabilmek için, Merkezi Sürüm Kontrol Sistemleri (MSKS) geliştirilmiştir. 
Bu sistemler, meselâ CVS, Subversion ve Perforce, sürüm kontrolüne alınan bütün dosyaları tutan bir sunucu ve bu sunucudan dosyaları seçerek alan (check out) istemcilerden oluşur. (((CVS)))(((Subversion)))(((Perforce)))
Bu yöntem, yıllarca, sürüm kontrolünde standart yöntem olarak kabul gördü.

.Centralized version control.
image::images/centralized.png[Merkezi sürüm kontrol diyagramı]

<<<<<<<
Bu yöntemin, özellikle yerel SKS'lere göre, çok sayıda avantajı vardır. 
Örneğin, bir projedeki herkes, diğerlerinin ne yaptığından belirli ölçüde haberdardır. 
Sistem yöneticileri, kimin hangi yetkilere sahip olacağını oldukça ayrıntılı biçimde düzenleyebilirler; üstelik bir MSKS'yi yönetmek, her istemcide ayrı ayrı kurulu olan yerel veritabanlarını yönetmeye göre çok daha kolaydır.

Ne var ki, bu yöntemin de ciddi bazı sıkıntıları vardır. 
En aşikar sıkıntı, merkezi sunucunun arızalanması durumunda ortaya çıkacak kırılma noktası problemidir. 
Sunucu bir saatliğine çökecek olsa, o bir saat boyunca kullanıcıların çalışmalarını sisteme aktarmaları ya da çalıştıkları şeylerin sürümlenmiş kopyalarını kaydetmeleri mümkün olmayacaktır. 
Merkezi veritabanının sabit diski bozulacak olsa, yedekleme de olması gerektiği gibi yapılmamışsa, elinizdeki her şeyi —projenin, kullanıcıların bilgisayarlarında kalan yerel bellek kopyaları (snapshot) dışındaki bütün tarihçesini— kaybedersiniz. 
Yerel SKS'ler de bu sorundan muzdariptir —projenin bütün tarihçesini tek bir yerde tuttuğunuz sürece her şeyi kaybetme riskiniz vardır.
=======
This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what, and it's far easier to administer a CVCS than it is to deal with local databases on every client.

However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything -- the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem -- whenever you have the entire history of the project in a single place, you risk losing everything.
>>>>>>>

==== Dağıtık Sürüm Kontrol Sistemleri

(((version control,distributed)))
<<<<<<<
Bu noktada Dağıtık Sürüm Kontrol Sistemleri (DSKS) devreye girer. 
Bir DSKS'de (Git, Mercurial, Bazaar ya da Darcs örneklerinde olduğu gibi), istemciler (kullanıcılar) dosyaların yalnızca en son bellek kopyalarını almakla kalmazlar: yazılım havuzunu (repository) bütünüyle kopyalarlar.
Böylece, sunuculardan biri çökerse, ve o sunucu üzerinden ortak çalışma yürüten sistemler varsa, istemcilerden birinin yazılım havuzu sunucuya geri yüklenerek sistem kurtarılabilir. 
Her kopyalama (clone) işlemi esasında bütün verinin bir yedeğidir.
=======
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history.
Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it.
Every clone is really a full backup of all the data.
>>>>>>>

.Distributed version control.
image::images/distributed.png[Dağıtık sürüm kontrol diyagramı]

Dahası, bu sistemlerden çoğu birden çok uzak uçbirimdeki yazılım havuzuyla rahatlıkla çalışır, böylece, aynı proje için aynı anda farklı insan topluluklarıyla farklı biçimlerde ortak çalışmalar yürütebilirsiniz. 
Bu, birden çok iş akışı ile çalışabilmenizi sağlar, ki bu hiyerarşik modeller gibi merkezi sistemlerde mümkün değildir.
