[[_getting_a_repo]]
=== Bir Git Deposu (repository) oluşturmak

Bir Git deposu oluşturmanın genellikle iki yolu vardır.

1. Lokalinizde bulunan ve versiyon kontrolünde olmayan bir dizini git deposuna çevirmek, veya
2. Herhangi bir yerden bir git deposunu _klonlamak_.

Her iki durumda da lokal makinenizde bir git dizininizde, çalışmaya hazır bir git dizini elde edersiniz.

==== Var olan bir dizinde Git deposu başlatmak

Eğer halihazırda bir versiyon kontrolünde olmayan bir projeniz varsa ve Git kullanarak versiyon kontrolüne başlamak istiyorsanız, öncelikle o projenin dizinine gitmelisiniz.
Eğer bunu daha önce yapmadıysanız, Kullandığınız sisteme göre bunu yapmak farklılık gösterebilir.

Linux için:
[source,console]
----
$ cd /home/user/my_project
----
macOS için:
[source,console]
----
$ cd /Users/user/my_project
----
Windows için:
[source,console]
----
$ cd /c/user/my_project
----

ardından:

[source,console]
----
$ git init
----

Bu komut `.git` adında git için gerekli olan bir alt klasör oluşturacaktır (Bir git deposu iskeleti). 
Şu anda projeniz hala versiyon kontrolü altında değil.
('.git' klasörü hakkında daha fazla ayrıntıya ulaşmak için <<ch10-git-internals#ch10-git-internals>> sayfasına bakabilirsiniz.)(((git commands, init)))

Eğer şuanda projenizde dosyalar bulunuyorsa, bunları git ile kayıt altına almak için bir başlangıç 'işlemi' (commit) girebilirsiniz.
Bunu kaydı tutulması istediğiniz dosyaları seçeceğiniz birkaç `git add` komutu ve ardından `git commit` komutunu girerek gerçekleştirebilirsiniz.

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'proje başlangıç versiyonu'
----

Bu komutların üzerinden birazdan geçeceğiz.
Şu noktada dosyalarınızı kayıt altına aldığınız bir git deponuz var ve ilk işleminizi girdiniz.

[[_git_cloning]]
==== Bir Git Deposunu Klonlamak

Eğer mevcut bir git deposunu, örneğin katkıda bulunmak istediğiniz bir projeyi klonlamak isterseniz, kullanmanız gerek komut `git clone`dur.
Eğer diğer VKS'leri kullanmışsanız komutun onlardaki gibi "checkout" değil de "clone" olduğunu fark edeceksiniz.
Bu önemli bir ayrıntı, çünkü git sadece çalışan bir kopya değil, sunucudaki tüm veriyi alır.
Projenin her versiyondaki her dosya varsayılan davranış olarak çekilir.
Bunun yanında, olur da sunucu diskiniz bozulursa genellikle projenin istemci tarafındaki neredeyse herhangi bir klonlanmış versiyonunu geri sunucuya çekebilirsiniz. (Tabi sunucu tarafında kullandığınız hook gibi özel komutları kaybedeceksiniz, fakat versiyon kontrolüne girmiş dosyalarınız klonda mevcut olacak. Ayrıntılı bilgi için <<ch04-git-on-the-server#_getting_git_on_a_server>>.)

Bir git deposunu şu komutla klonlarsınız `git clone <url>`.(((git commands, clone)))
Örneğin `libgit2` adındaki Git kütüphanesini şu şekilde çekebilirsiniz.

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Bu komut `libgit2` adında bir dizin ve altında `.git` klasörünü oluşturacaktır, ve depoya ilişkin tüm veriyi çekecektir, kütüphanenin çalışan güncel bir versiyonuna geçecektir.
`libgit2` klasörüne girerseniz, çalışmaya hazır veya kullanılan proje dosyalarını göreceksiniz.

Eğer `libgit2` değil de farklı bir dizine klonlamak isterseniz, komuta ek bir argüman ekleyebilirsiniz.

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 benimlibgitim
----

Bu komut önceki komutla hedef klasördeki ismi `benimlibgitim` olarak değiştirmesi dışında aynı işi yapacaktır.

Git ile kullanabileceğiniz birkaç farklı transfer protokolü bulunmaktadır.
Önceki örnekte `https://` protokolü kullandınız fakat `git://` veya `user@server:path/to/repo.git` gibi SSH kullanan kullanımlar da görebilirsiniz.
<<ch04-git-on-the-server#_getting_git_on_a_server>> git deponuzda kullanmak için sunucunuzda kullanabileceğeniz tüm seçenekleri avantajları ve dezavantajları ile tanıtacaktır.
